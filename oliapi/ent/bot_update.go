// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"oliapi/ent/blockcategory"
	"oliapi/ent/bot"
	"oliapi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BotUpdate is the builder for updating Bot entities.
type BotUpdate struct {
	config
	hooks    []Hook
	mutation *BotMutation
}

// Where appends a list predicates to the BotUpdate builder.
func (bu *BotUpdate) Where(ps ...predicate.Bot) *BotUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BotUpdate) SetName(s string) *BotUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BotUpdate) SetNillableName(s *string) *BotUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetGreetingMessage sets the "greeting_message" field.
func (bu *BotUpdate) SetGreetingMessage(s string) *BotUpdate {
	bu.mutation.SetGreetingMessage(s)
	return bu
}

// SetNillableGreetingMessage sets the "greeting_message" field if the given value is not nil.
func (bu *BotUpdate) SetNillableGreetingMessage(s *string) *BotUpdate {
	if s != nil {
		bu.SetGreetingMessage(*s)
	}
	return bu
}

// SetCustomPropmt sets the "custom_propmt" field.
func (bu *BotUpdate) SetCustomPropmt(s string) *BotUpdate {
	bu.mutation.SetCustomPropmt(s)
	return bu
}

// SetNillableCustomPropmt sets the "custom_propmt" field if the given value is not nil.
func (bu *BotUpdate) SetNillableCustomPropmt(s *string) *BotUpdate {
	if s != nil {
		bu.SetCustomPropmt(*s)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BotUpdate) SetUpdatedAt(t time.Time) *BotUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bu *BotUpdate) SetNillableUpdatedAt(t *time.Time) *BotUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// SetArchivedAt sets the "archived_at" field.
func (bu *BotUpdate) SetArchivedAt(t time.Time) *BotUpdate {
	bu.mutation.SetArchivedAt(t)
	return bu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (bu *BotUpdate) SetNillableArchivedAt(t *time.Time) *BotUpdate {
	if t != nil {
		bu.SetArchivedAt(*t)
	}
	return bu
}

// AddBlockIDs adds the "blocks" edge to the BlockCategory entity by IDs.
func (bu *BotUpdate) AddBlockIDs(ids ...uuid.UUID) *BotUpdate {
	bu.mutation.AddBlockIDs(ids...)
	return bu
}

// AddBlocks adds the "blocks" edges to the BlockCategory entity.
func (bu *BotUpdate) AddBlocks(b ...*BlockCategory) *BotUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBlockIDs(ids...)
}

// Mutation returns the BotMutation object of the builder.
func (bu *BotUpdate) Mutation() *BotMutation {
	return bu.mutation
}

// ClearBlocks clears all "blocks" edges to the BlockCategory entity.
func (bu *BotUpdate) ClearBlocks() *BotUpdate {
	bu.mutation.ClearBlocks()
	return bu
}

// RemoveBlockIDs removes the "blocks" edge to BlockCategory entities by IDs.
func (bu *BotUpdate) RemoveBlockIDs(ids ...uuid.UUID) *BotUpdate {
	bu.mutation.RemoveBlockIDs(ids...)
	return bu
}

// RemoveBlocks removes "blocks" edges to BlockCategory entities.
func (bu *BotUpdate) RemoveBlocks(b ...*BlockCategory) *BotUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBlockIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BotUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BotUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BotUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BotUpdate) check() error {
	if _, ok := bu.mutation.CompanyID(); bu.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Bot.company"`)
	}
	return nil
}

func (bu *BotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bot.Table, bot.Columns, sqlgraph.NewFieldSpec(bot.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(bot.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.GreetingMessage(); ok {
		_spec.SetField(bot.FieldGreetingMessage, field.TypeString, value)
	}
	if value, ok := bu.mutation.CustomPropmt(); ok {
		_spec.SetField(bot.FieldCustomPropmt, field.TypeString, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bot.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.ArchivedAt(); ok {
		_spec.SetField(bot.FieldArchivedAt, field.TypeTime, value)
	}
	if bu.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bot.BlocksTable,
			Columns: []string{bot.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !bu.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bot.BlocksTable,
			Columns: []string{bot.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bot.BlocksTable,
			Columns: []string{bot.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BotUpdateOne is the builder for updating a single Bot entity.
type BotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BotMutation
}

// SetName sets the "name" field.
func (buo *BotUpdateOne) SetName(s string) *BotUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BotUpdateOne) SetNillableName(s *string) *BotUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetGreetingMessage sets the "greeting_message" field.
func (buo *BotUpdateOne) SetGreetingMessage(s string) *BotUpdateOne {
	buo.mutation.SetGreetingMessage(s)
	return buo
}

// SetNillableGreetingMessage sets the "greeting_message" field if the given value is not nil.
func (buo *BotUpdateOne) SetNillableGreetingMessage(s *string) *BotUpdateOne {
	if s != nil {
		buo.SetGreetingMessage(*s)
	}
	return buo
}

// SetCustomPropmt sets the "custom_propmt" field.
func (buo *BotUpdateOne) SetCustomPropmt(s string) *BotUpdateOne {
	buo.mutation.SetCustomPropmt(s)
	return buo
}

// SetNillableCustomPropmt sets the "custom_propmt" field if the given value is not nil.
func (buo *BotUpdateOne) SetNillableCustomPropmt(s *string) *BotUpdateOne {
	if s != nil {
		buo.SetCustomPropmt(*s)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BotUpdateOne) SetUpdatedAt(t time.Time) *BotUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (buo *BotUpdateOne) SetNillableUpdatedAt(t *time.Time) *BotUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// SetArchivedAt sets the "archived_at" field.
func (buo *BotUpdateOne) SetArchivedAt(t time.Time) *BotUpdateOne {
	buo.mutation.SetArchivedAt(t)
	return buo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (buo *BotUpdateOne) SetNillableArchivedAt(t *time.Time) *BotUpdateOne {
	if t != nil {
		buo.SetArchivedAt(*t)
	}
	return buo
}

// AddBlockIDs adds the "blocks" edge to the BlockCategory entity by IDs.
func (buo *BotUpdateOne) AddBlockIDs(ids ...uuid.UUID) *BotUpdateOne {
	buo.mutation.AddBlockIDs(ids...)
	return buo
}

// AddBlocks adds the "blocks" edges to the BlockCategory entity.
func (buo *BotUpdateOne) AddBlocks(b ...*BlockCategory) *BotUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBlockIDs(ids...)
}

// Mutation returns the BotMutation object of the builder.
func (buo *BotUpdateOne) Mutation() *BotMutation {
	return buo.mutation
}

// ClearBlocks clears all "blocks" edges to the BlockCategory entity.
func (buo *BotUpdateOne) ClearBlocks() *BotUpdateOne {
	buo.mutation.ClearBlocks()
	return buo
}

// RemoveBlockIDs removes the "blocks" edge to BlockCategory entities by IDs.
func (buo *BotUpdateOne) RemoveBlockIDs(ids ...uuid.UUID) *BotUpdateOne {
	buo.mutation.RemoveBlockIDs(ids...)
	return buo
}

// RemoveBlocks removes "blocks" edges to BlockCategory entities.
func (buo *BotUpdateOne) RemoveBlocks(b ...*BlockCategory) *BotUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBlockIDs(ids...)
}

// Where appends a list predicates to the BotUpdate builder.
func (buo *BotUpdateOne) Where(ps ...predicate.Bot) *BotUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BotUpdateOne) Select(field string, fields ...string) *BotUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bot entity.
func (buo *BotUpdateOne) Save(ctx context.Context) (*Bot, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BotUpdateOne) SaveX(ctx context.Context) *Bot {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BotUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BotUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BotUpdateOne) check() error {
	if _, ok := buo.mutation.CompanyID(); buo.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Bot.company"`)
	}
	return nil
}

func (buo *BotUpdateOne) sqlSave(ctx context.Context) (_node *Bot, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bot.Table, bot.Columns, sqlgraph.NewFieldSpec(bot.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bot.FieldID)
		for _, f := range fields {
			if !bot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(bot.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.GreetingMessage(); ok {
		_spec.SetField(bot.FieldGreetingMessage, field.TypeString, value)
	}
	if value, ok := buo.mutation.CustomPropmt(); ok {
		_spec.SetField(bot.FieldCustomPropmt, field.TypeString, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bot.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.ArchivedAt(); ok {
		_spec.SetField(bot.FieldArchivedAt, field.TypeTime, value)
	}
	if buo.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bot.BlocksTable,
			Columns: []string{bot.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !buo.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bot.BlocksTable,
			Columns: []string{bot.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bot.BlocksTable,
			Columns: []string{bot.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bot{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
