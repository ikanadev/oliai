// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"oliapi/ent/blockcategory"
	"oliapi/ent/blockinfo"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BlockInfo is the model entity for the BlockInfo schema.
type BlockInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ArchivedAt holds the value of the "archived_at" field.
	ArchivedAt *time.Time `json:"archived_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockInfoQuery when eager-loading is set.
	Edges                 BlockInfoEdges `json:"edges"`
	block_category_blocks *uuid.UUID
	selectValues          sql.SelectValues
}

// BlockInfoEdges holds the relations/edges for other nodes in the graph.
type BlockInfoEdges struct {
	// Category holds the value of the category edge.
	Category *BlockCategory `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockInfoEdges) CategoryOrErr() (*BlockCategory, error) {
	if e.loadedTypes[0] {
		if e.Category == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: blockcategory.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockinfo.FieldContent:
			values[i] = new(sql.NullString)
		case blockinfo.FieldCreatedAt, blockinfo.FieldUpdatedAt, blockinfo.FieldArchivedAt:
			values[i] = new(sql.NullTime)
		case blockinfo.FieldID:
			values[i] = new(uuid.UUID)
		case blockinfo.ForeignKeys[0]: // block_category_blocks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockInfo fields.
func (bi *BlockInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockinfo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bi.ID = *value
			}
		case blockinfo.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				bi.Content = value.String
			}
		case blockinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bi.CreatedAt = value.Time
			}
		case blockinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bi.UpdatedAt = value.Time
			}
		case blockinfo.FieldArchivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archived_at", values[i])
			} else if value.Valid {
				bi.ArchivedAt = new(time.Time)
				*bi.ArchivedAt = value.Time
			}
		case blockinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field block_category_blocks", values[i])
			} else if value.Valid {
				bi.block_category_blocks = new(uuid.UUID)
				*bi.block_category_blocks = *value.S.(*uuid.UUID)
			}
		default:
			bi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlockInfo.
// This includes values selected through modifiers, order, etc.
func (bi *BlockInfo) Value(name string) (ent.Value, error) {
	return bi.selectValues.Get(name)
}

// QueryCategory queries the "category" edge of the BlockInfo entity.
func (bi *BlockInfo) QueryCategory() *BlockCategoryQuery {
	return NewBlockInfoClient(bi.config).QueryCategory(bi)
}

// Update returns a builder for updating this BlockInfo.
// Note that you need to call BlockInfo.Unwrap() before calling this method if this BlockInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (bi *BlockInfo) Update() *BlockInfoUpdateOne {
	return NewBlockInfoClient(bi.config).UpdateOne(bi)
}

// Unwrap unwraps the BlockInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bi *BlockInfo) Unwrap() *BlockInfo {
	_tx, ok := bi.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockInfo is not a transactional entity")
	}
	bi.config.driver = _tx.drv
	return bi
}

// String implements the fmt.Stringer.
func (bi *BlockInfo) String() string {
	var builder strings.Builder
	builder.WriteString("BlockInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bi.ID))
	builder.WriteString("content=")
	builder.WriteString(bi.Content)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bi.ArchivedAt; v != nil {
		builder.WriteString("archived_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BlockInfos is a parsable slice of BlockInfo.
type BlockInfos []*BlockInfo
