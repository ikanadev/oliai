// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"oliapi/ent/bot"
	"oliapi/ent/company"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Bot is the model entity for the Bot schema.
type Bot struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// GreetingMessage holds the value of the "greeting_message" field.
	GreetingMessage string `json:"greeting_message,omitempty"`
	// CustomPropmt holds the value of the "custom_propmt" field.
	CustomPropmt string `json:"custom_propmt,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ArchivedAt holds the value of the "archived_at" field.
	ArchivedAt *time.Time `json:"archived_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BotQuery when eager-loading is set.
	Edges        BotEdges `json:"edges"`
	company_bots *uuid.UUID
	selectValues sql.SelectValues
}

// BotEdges holds the relations/edges for other nodes in the graph.
type BotEdges struct {
	// Blocks holds the value of the blocks edge.
	Blocks []*BlockCategory `json:"blocks,omitempty"`
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlocksOrErr returns the Blocks value or an error if the edge
// was not loaded in eager-loading.
func (e BotEdges) BlocksOrErr() ([]*BlockCategory, error) {
	if e.loadedTypes[0] {
		return e.Blocks, nil
	}
	return nil, &NotLoadedError{edge: "blocks"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BotEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[1] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bot.FieldName, bot.FieldGreetingMessage, bot.FieldCustomPropmt:
			values[i] = new(sql.NullString)
		case bot.FieldCreatedAt, bot.FieldUpdatedAt, bot.FieldArchivedAt:
			values[i] = new(sql.NullTime)
		case bot.FieldID:
			values[i] = new(uuid.UUID)
		case bot.ForeignKeys[0]: // company_bots
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bot fields.
func (b *Bot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bot.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case bot.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case bot.FieldGreetingMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field greeting_message", values[i])
			} else if value.Valid {
				b.GreetingMessage = value.String
			}
		case bot.FieldCustomPropmt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_propmt", values[i])
			} else if value.Valid {
				b.CustomPropmt = value.String
			}
		case bot.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case bot.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case bot.FieldArchivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archived_at", values[i])
			} else if value.Valid {
				b.ArchivedAt = new(time.Time)
				*b.ArchivedAt = value.Time
			}
		case bot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field company_bots", values[i])
			} else if value.Valid {
				b.company_bots = new(uuid.UUID)
				*b.company_bots = *value.S.(*uuid.UUID)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bot.
// This includes values selected through modifiers, order, etc.
func (b *Bot) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryBlocks queries the "blocks" edge of the Bot entity.
func (b *Bot) QueryBlocks() *BlockCategoryQuery {
	return NewBotClient(b.config).QueryBlocks(b)
}

// QueryCompany queries the "company" edge of the Bot entity.
func (b *Bot) QueryCompany() *CompanyQuery {
	return NewBotClient(b.config).QueryCompany(b)
}

// Update returns a builder for updating this Bot.
// Note that you need to call Bot.Unwrap() before calling this method if this Bot
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bot) Update() *BotUpdateOne {
	return NewBotClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bot) Unwrap() *Bot {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bot is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bot) String() string {
	var builder strings.Builder
	builder.WriteString("Bot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("greeting_message=")
	builder.WriteString(b.GreetingMessage)
	builder.WriteString(", ")
	builder.WriteString("custom_propmt=")
	builder.WriteString(b.CustomPropmt)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := b.ArchivedAt; v != nil {
		builder.WriteString("archived_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Bots is a parsable slice of Bot.
type Bots []*Bot
