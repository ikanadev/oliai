// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"oliapi/ent/blockinfo"
	"oliapi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockInfoUpdate is the builder for updating BlockInfo entities.
type BlockInfoUpdate struct {
	config
	hooks    []Hook
	mutation *BlockInfoMutation
}

// Where appends a list predicates to the BlockInfoUpdate builder.
func (biu *BlockInfoUpdate) Where(ps ...predicate.BlockInfo) *BlockInfoUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetContent sets the "content" field.
func (biu *BlockInfoUpdate) SetContent(s string) *BlockInfoUpdate {
	biu.mutation.SetContent(s)
	return biu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (biu *BlockInfoUpdate) SetNillableContent(s *string) *BlockInfoUpdate {
	if s != nil {
		biu.SetContent(*s)
	}
	return biu
}

// SetUpdatedAt sets the "updated_at" field.
func (biu *BlockInfoUpdate) SetUpdatedAt(t time.Time) *BlockInfoUpdate {
	biu.mutation.SetUpdatedAt(t)
	return biu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (biu *BlockInfoUpdate) SetNillableUpdatedAt(t *time.Time) *BlockInfoUpdate {
	if t != nil {
		biu.SetUpdatedAt(*t)
	}
	return biu
}

// SetArchivedAt sets the "archived_at" field.
func (biu *BlockInfoUpdate) SetArchivedAt(t time.Time) *BlockInfoUpdate {
	biu.mutation.SetArchivedAt(t)
	return biu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (biu *BlockInfoUpdate) SetNillableArchivedAt(t *time.Time) *BlockInfoUpdate {
	if t != nil {
		biu.SetArchivedAt(*t)
	}
	return biu
}

// Mutation returns the BlockInfoMutation object of the builder.
func (biu *BlockInfoUpdate) Mutation() *BlockInfoMutation {
	return biu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BlockInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BlockInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BlockInfoUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BlockInfoUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BlockInfoUpdate) check() error {
	if _, ok := biu.mutation.CategoryID(); biu.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BlockInfo.category"`)
	}
	return nil
}

func (biu *BlockInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockinfo.Table, blockinfo.Columns, sqlgraph.NewFieldSpec(blockinfo.FieldID, field.TypeUUID))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.Content(); ok {
		_spec.SetField(blockinfo.FieldContent, field.TypeString, value)
	}
	if value, ok := biu.mutation.UpdatedAt(); ok {
		_spec.SetField(blockinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biu.mutation.ArchivedAt(); ok {
		_spec.SetField(blockinfo.FieldArchivedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BlockInfoUpdateOne is the builder for updating a single BlockInfo entity.
type BlockInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockInfoMutation
}

// SetContent sets the "content" field.
func (biuo *BlockInfoUpdateOne) SetContent(s string) *BlockInfoUpdateOne {
	biuo.mutation.SetContent(s)
	return biuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (biuo *BlockInfoUpdateOne) SetNillableContent(s *string) *BlockInfoUpdateOne {
	if s != nil {
		biuo.SetContent(*s)
	}
	return biuo
}

// SetUpdatedAt sets the "updated_at" field.
func (biuo *BlockInfoUpdateOne) SetUpdatedAt(t time.Time) *BlockInfoUpdateOne {
	biuo.mutation.SetUpdatedAt(t)
	return biuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (biuo *BlockInfoUpdateOne) SetNillableUpdatedAt(t *time.Time) *BlockInfoUpdateOne {
	if t != nil {
		biuo.SetUpdatedAt(*t)
	}
	return biuo
}

// SetArchivedAt sets the "archived_at" field.
func (biuo *BlockInfoUpdateOne) SetArchivedAt(t time.Time) *BlockInfoUpdateOne {
	biuo.mutation.SetArchivedAt(t)
	return biuo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (biuo *BlockInfoUpdateOne) SetNillableArchivedAt(t *time.Time) *BlockInfoUpdateOne {
	if t != nil {
		biuo.SetArchivedAt(*t)
	}
	return biuo
}

// Mutation returns the BlockInfoMutation object of the builder.
func (biuo *BlockInfoUpdateOne) Mutation() *BlockInfoMutation {
	return biuo.mutation
}

// Where appends a list predicates to the BlockInfoUpdate builder.
func (biuo *BlockInfoUpdateOne) Where(ps ...predicate.BlockInfo) *BlockInfoUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BlockInfoUpdateOne) Select(field string, fields ...string) *BlockInfoUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BlockInfo entity.
func (biuo *BlockInfoUpdateOne) Save(ctx context.Context) (*BlockInfo, error) {
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BlockInfoUpdateOne) SaveX(ctx context.Context) *BlockInfo {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BlockInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BlockInfoUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BlockInfoUpdateOne) check() error {
	if _, ok := biuo.mutation.CategoryID(); biuo.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BlockInfo.category"`)
	}
	return nil
}

func (biuo *BlockInfoUpdateOne) sqlSave(ctx context.Context) (_node *BlockInfo, err error) {
	if err := biuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockinfo.Table, blockinfo.Columns, sqlgraph.NewFieldSpec(blockinfo.FieldID, field.TypeUUID))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockinfo.FieldID)
		for _, f := range fields {
			if !blockinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.Content(); ok {
		_spec.SetField(blockinfo.FieldContent, field.TypeString, value)
	}
	if value, ok := biuo.mutation.UpdatedAt(); ok {
		_spec.SetField(blockinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.ArchivedAt(); ok {
		_spec.SetField(blockinfo.FieldArchivedAt, field.TypeTime, value)
	}
	_node = &BlockInfo{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}
