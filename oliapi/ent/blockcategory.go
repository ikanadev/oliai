// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"oliapi/ent/blockcategory"
	"oliapi/ent/bot"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BlockCategory is the model entity for the BlockCategory schema.
type BlockCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ArchivedAt holds the value of the "archived_at" field.
	ArchivedAt *time.Time `json:"archived_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockCategoryQuery when eager-loading is set.
	Edges        BlockCategoryEdges `json:"edges"`
	bot_blocks   *uuid.UUID
	selectValues sql.SelectValues
}

// BlockCategoryEdges holds the relations/edges for other nodes in the graph.
type BlockCategoryEdges struct {
	// Blocks holds the value of the blocks edge.
	Blocks []*BlockInfo `json:"blocks,omitempty"`
	// Bot holds the value of the bot edge.
	Bot *Bot `json:"bot,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlocksOrErr returns the Blocks value or an error if the edge
// was not loaded in eager-loading.
func (e BlockCategoryEdges) BlocksOrErr() ([]*BlockInfo, error) {
	if e.loadedTypes[0] {
		return e.Blocks, nil
	}
	return nil, &NotLoadedError{edge: "blocks"}
}

// BotOrErr returns the Bot value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockCategoryEdges) BotOrErr() (*Bot, error) {
	if e.loadedTypes[1] {
		if e.Bot == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: bot.Label}
		}
		return e.Bot, nil
	}
	return nil, &NotLoadedError{edge: "bot"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockcategory.FieldName:
			values[i] = new(sql.NullString)
		case blockcategory.FieldCreatedAt, blockcategory.FieldUpdatedAt, blockcategory.FieldArchivedAt:
			values[i] = new(sql.NullTime)
		case blockcategory.FieldID:
			values[i] = new(uuid.UUID)
		case blockcategory.ForeignKeys[0]: // bot_blocks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockCategory fields.
func (bc *BlockCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockcategory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bc.ID = *value
			}
		case blockcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bc.Name = value.String
			}
		case blockcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bc.CreatedAt = value.Time
			}
		case blockcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bc.UpdatedAt = value.Time
			}
		case blockcategory.FieldArchivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archived_at", values[i])
			} else if value.Valid {
				bc.ArchivedAt = new(time.Time)
				*bc.ArchivedAt = value.Time
			}
		case blockcategory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field bot_blocks", values[i])
			} else if value.Valid {
				bc.bot_blocks = new(uuid.UUID)
				*bc.bot_blocks = *value.S.(*uuid.UUID)
			}
		default:
			bc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlockCategory.
// This includes values selected through modifiers, order, etc.
func (bc *BlockCategory) Value(name string) (ent.Value, error) {
	return bc.selectValues.Get(name)
}

// QueryBlocks queries the "blocks" edge of the BlockCategory entity.
func (bc *BlockCategory) QueryBlocks() *BlockInfoQuery {
	return NewBlockCategoryClient(bc.config).QueryBlocks(bc)
}

// QueryBot queries the "bot" edge of the BlockCategory entity.
func (bc *BlockCategory) QueryBot() *BotQuery {
	return NewBlockCategoryClient(bc.config).QueryBot(bc)
}

// Update returns a builder for updating this BlockCategory.
// Note that you need to call BlockCategory.Unwrap() before calling this method if this BlockCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BlockCategory) Update() *BlockCategoryUpdateOne {
	return NewBlockCategoryClient(bc.config).UpdateOne(bc)
}

// Unwrap unwraps the BlockCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BlockCategory) Unwrap() *BlockCategory {
	_tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockCategory is not a transactional entity")
	}
	bc.config.driver = _tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BlockCategory) String() string {
	var builder strings.Builder
	builder.WriteString("BlockCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bc.ID))
	builder.WriteString("name=")
	builder.WriteString(bc.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bc.ArchivedAt; v != nil {
		builder.WriteString("archived_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BlockCategories is a parsable slice of BlockCategory.
type BlockCategories []*BlockCategory
