// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"oliapi/ent/blockcategory"
	"oliapi/ent/blockinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlockInfoCreate is the builder for creating a BlockInfo entity.
type BlockInfoCreate struct {
	config
	mutation *BlockInfoMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (bic *BlockInfoCreate) SetContent(s string) *BlockInfoCreate {
	bic.mutation.SetContent(s)
	return bic
}

// SetCreatedAt sets the "created_at" field.
func (bic *BlockInfoCreate) SetCreatedAt(t time.Time) *BlockInfoCreate {
	bic.mutation.SetCreatedAt(t)
	return bic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bic *BlockInfoCreate) SetNillableCreatedAt(t *time.Time) *BlockInfoCreate {
	if t != nil {
		bic.SetCreatedAt(*t)
	}
	return bic
}

// SetUpdatedAt sets the "updated_at" field.
func (bic *BlockInfoCreate) SetUpdatedAt(t time.Time) *BlockInfoCreate {
	bic.mutation.SetUpdatedAt(t)
	return bic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bic *BlockInfoCreate) SetNillableUpdatedAt(t *time.Time) *BlockInfoCreate {
	if t != nil {
		bic.SetUpdatedAt(*t)
	}
	return bic
}

// SetArchivedAt sets the "archived_at" field.
func (bic *BlockInfoCreate) SetArchivedAt(t time.Time) *BlockInfoCreate {
	bic.mutation.SetArchivedAt(t)
	return bic
}

// SetID sets the "id" field.
func (bic *BlockInfoCreate) SetID(u uuid.UUID) *BlockInfoCreate {
	bic.mutation.SetID(u)
	return bic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bic *BlockInfoCreate) SetNillableID(u *uuid.UUID) *BlockInfoCreate {
	if u != nil {
		bic.SetID(*u)
	}
	return bic
}

// SetCategoryID sets the "category" edge to the BlockCategory entity by ID.
func (bic *BlockInfoCreate) SetCategoryID(id uuid.UUID) *BlockInfoCreate {
	bic.mutation.SetCategoryID(id)
	return bic
}

// SetCategory sets the "category" edge to the BlockCategory entity.
func (bic *BlockInfoCreate) SetCategory(b *BlockCategory) *BlockInfoCreate {
	return bic.SetCategoryID(b.ID)
}

// Mutation returns the BlockInfoMutation object of the builder.
func (bic *BlockInfoCreate) Mutation() *BlockInfoMutation {
	return bic.mutation
}

// Save creates the BlockInfo in the database.
func (bic *BlockInfoCreate) Save(ctx context.Context) (*BlockInfo, error) {
	bic.defaults()
	return withHooks(ctx, bic.sqlSave, bic.mutation, bic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bic *BlockInfoCreate) SaveX(ctx context.Context) *BlockInfo {
	v, err := bic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bic *BlockInfoCreate) Exec(ctx context.Context) error {
	_, err := bic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bic *BlockInfoCreate) ExecX(ctx context.Context) {
	if err := bic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bic *BlockInfoCreate) defaults() {
	if _, ok := bic.mutation.CreatedAt(); !ok {
		v := blockinfo.DefaultCreatedAt()
		bic.mutation.SetCreatedAt(v)
	}
	if _, ok := bic.mutation.UpdatedAt(); !ok {
		v := blockinfo.DefaultUpdatedAt()
		bic.mutation.SetUpdatedAt(v)
	}
	if _, ok := bic.mutation.ID(); !ok {
		v := blockinfo.DefaultID()
		bic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bic *BlockInfoCreate) check() error {
	if _, ok := bic.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "BlockInfo.content"`)}
	}
	if _, ok := bic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockInfo.created_at"`)}
	}
	if _, ok := bic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockInfo.updated_at"`)}
	}
	if _, ok := bic.mutation.ArchivedAt(); !ok {
		return &ValidationError{Name: "archived_at", err: errors.New(`ent: missing required field "BlockInfo.archived_at"`)}
	}
	if _, ok := bic.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required edge "BlockInfo.category"`)}
	}
	return nil
}

func (bic *BlockInfoCreate) sqlSave(ctx context.Context) (*BlockInfo, error) {
	if err := bic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bic.mutation.id = &_node.ID
	bic.mutation.done = true
	return _node, nil
}

func (bic *BlockInfoCreate) createSpec() (*BlockInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockInfo{config: bic.config}
		_spec = sqlgraph.NewCreateSpec(blockinfo.Table, sqlgraph.NewFieldSpec(blockinfo.FieldID, field.TypeUUID))
	)
	if id, ok := bic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bic.mutation.Content(); ok {
		_spec.SetField(blockinfo.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := bic.mutation.CreatedAt(); ok {
		_spec.SetField(blockinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bic.mutation.UpdatedAt(); ok {
		_spec.SetField(blockinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bic.mutation.ArchivedAt(); ok {
		_spec.SetField(blockinfo.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = &value
	}
	if nodes := bic.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockinfo.CategoryTable,
			Columns: []string{blockinfo.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.block_category_blocks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlockInfoCreateBulk is the builder for creating many BlockInfo entities in bulk.
type BlockInfoCreateBulk struct {
	config
	err      error
	builders []*BlockInfoCreate
}

// Save creates the BlockInfo entities in the database.
func (bicb *BlockInfoCreateBulk) Save(ctx context.Context) ([]*BlockInfo, error) {
	if bicb.err != nil {
		return nil, bicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bicb.builders))
	nodes := make([]*BlockInfo, len(bicb.builders))
	mutators := make([]Mutator, len(bicb.builders))
	for i := range bicb.builders {
		func(i int, root context.Context) {
			builder := bicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bicb *BlockInfoCreateBulk) SaveX(ctx context.Context) []*BlockInfo {
	v, err := bicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bicb *BlockInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := bicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicb *BlockInfoCreateBulk) ExecX(ctx context.Context) {
	if err := bicb.Exec(ctx); err != nil {
		panic(err)
	}
}
