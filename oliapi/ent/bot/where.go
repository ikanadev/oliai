// Code generated by ent, DO NOT EDIT.

package bot

import (
	"oliapi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Bot {
	return predicate.Bot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Bot {
	return predicate.Bot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Bot {
	return predicate.Bot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Bot {
	return predicate.Bot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Bot {
	return predicate.Bot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Bot {
	return predicate.Bot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Bot {
	return predicate.Bot(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldName, v))
}

// GreetingMessage applies equality check predicate on the "greeting_message" field. It's identical to GreetingMessageEQ.
func GreetingMessage(v string) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldGreetingMessage, v))
}

// CustomPropmt applies equality check predicate on the "custom_propmt" field. It's identical to CustomPropmtEQ.
func CustomPropmt(v string) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldCustomPropmt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldUpdatedAt, v))
}

// ArchivedAt applies equality check predicate on the "archived_at" field. It's identical to ArchivedAtEQ.
func ArchivedAt(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldArchivedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Bot {
	return predicate.Bot(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Bot {
	return predicate.Bot(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Bot {
	return predicate.Bot(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Bot {
	return predicate.Bot(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Bot {
	return predicate.Bot(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Bot {
	return predicate.Bot(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Bot {
	return predicate.Bot(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Bot {
	return predicate.Bot(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Bot {
	return predicate.Bot(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Bot {
	return predicate.Bot(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Bot {
	return predicate.Bot(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Bot {
	return predicate.Bot(sql.FieldContainsFold(FieldName, v))
}

// GreetingMessageEQ applies the EQ predicate on the "greeting_message" field.
func GreetingMessageEQ(v string) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldGreetingMessage, v))
}

// GreetingMessageNEQ applies the NEQ predicate on the "greeting_message" field.
func GreetingMessageNEQ(v string) predicate.Bot {
	return predicate.Bot(sql.FieldNEQ(FieldGreetingMessage, v))
}

// GreetingMessageIn applies the In predicate on the "greeting_message" field.
func GreetingMessageIn(vs ...string) predicate.Bot {
	return predicate.Bot(sql.FieldIn(FieldGreetingMessage, vs...))
}

// GreetingMessageNotIn applies the NotIn predicate on the "greeting_message" field.
func GreetingMessageNotIn(vs ...string) predicate.Bot {
	return predicate.Bot(sql.FieldNotIn(FieldGreetingMessage, vs...))
}

// GreetingMessageGT applies the GT predicate on the "greeting_message" field.
func GreetingMessageGT(v string) predicate.Bot {
	return predicate.Bot(sql.FieldGT(FieldGreetingMessage, v))
}

// GreetingMessageGTE applies the GTE predicate on the "greeting_message" field.
func GreetingMessageGTE(v string) predicate.Bot {
	return predicate.Bot(sql.FieldGTE(FieldGreetingMessage, v))
}

// GreetingMessageLT applies the LT predicate on the "greeting_message" field.
func GreetingMessageLT(v string) predicate.Bot {
	return predicate.Bot(sql.FieldLT(FieldGreetingMessage, v))
}

// GreetingMessageLTE applies the LTE predicate on the "greeting_message" field.
func GreetingMessageLTE(v string) predicate.Bot {
	return predicate.Bot(sql.FieldLTE(FieldGreetingMessage, v))
}

// GreetingMessageContains applies the Contains predicate on the "greeting_message" field.
func GreetingMessageContains(v string) predicate.Bot {
	return predicate.Bot(sql.FieldContains(FieldGreetingMessage, v))
}

// GreetingMessageHasPrefix applies the HasPrefix predicate on the "greeting_message" field.
func GreetingMessageHasPrefix(v string) predicate.Bot {
	return predicate.Bot(sql.FieldHasPrefix(FieldGreetingMessage, v))
}

// GreetingMessageHasSuffix applies the HasSuffix predicate on the "greeting_message" field.
func GreetingMessageHasSuffix(v string) predicate.Bot {
	return predicate.Bot(sql.FieldHasSuffix(FieldGreetingMessage, v))
}

// GreetingMessageEqualFold applies the EqualFold predicate on the "greeting_message" field.
func GreetingMessageEqualFold(v string) predicate.Bot {
	return predicate.Bot(sql.FieldEqualFold(FieldGreetingMessage, v))
}

// GreetingMessageContainsFold applies the ContainsFold predicate on the "greeting_message" field.
func GreetingMessageContainsFold(v string) predicate.Bot {
	return predicate.Bot(sql.FieldContainsFold(FieldGreetingMessage, v))
}

// CustomPropmtEQ applies the EQ predicate on the "custom_propmt" field.
func CustomPropmtEQ(v string) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldCustomPropmt, v))
}

// CustomPropmtNEQ applies the NEQ predicate on the "custom_propmt" field.
func CustomPropmtNEQ(v string) predicate.Bot {
	return predicate.Bot(sql.FieldNEQ(FieldCustomPropmt, v))
}

// CustomPropmtIn applies the In predicate on the "custom_propmt" field.
func CustomPropmtIn(vs ...string) predicate.Bot {
	return predicate.Bot(sql.FieldIn(FieldCustomPropmt, vs...))
}

// CustomPropmtNotIn applies the NotIn predicate on the "custom_propmt" field.
func CustomPropmtNotIn(vs ...string) predicate.Bot {
	return predicate.Bot(sql.FieldNotIn(FieldCustomPropmt, vs...))
}

// CustomPropmtGT applies the GT predicate on the "custom_propmt" field.
func CustomPropmtGT(v string) predicate.Bot {
	return predicate.Bot(sql.FieldGT(FieldCustomPropmt, v))
}

// CustomPropmtGTE applies the GTE predicate on the "custom_propmt" field.
func CustomPropmtGTE(v string) predicate.Bot {
	return predicate.Bot(sql.FieldGTE(FieldCustomPropmt, v))
}

// CustomPropmtLT applies the LT predicate on the "custom_propmt" field.
func CustomPropmtLT(v string) predicate.Bot {
	return predicate.Bot(sql.FieldLT(FieldCustomPropmt, v))
}

// CustomPropmtLTE applies the LTE predicate on the "custom_propmt" field.
func CustomPropmtLTE(v string) predicate.Bot {
	return predicate.Bot(sql.FieldLTE(FieldCustomPropmt, v))
}

// CustomPropmtContains applies the Contains predicate on the "custom_propmt" field.
func CustomPropmtContains(v string) predicate.Bot {
	return predicate.Bot(sql.FieldContains(FieldCustomPropmt, v))
}

// CustomPropmtHasPrefix applies the HasPrefix predicate on the "custom_propmt" field.
func CustomPropmtHasPrefix(v string) predicate.Bot {
	return predicate.Bot(sql.FieldHasPrefix(FieldCustomPropmt, v))
}

// CustomPropmtHasSuffix applies the HasSuffix predicate on the "custom_propmt" field.
func CustomPropmtHasSuffix(v string) predicate.Bot {
	return predicate.Bot(sql.FieldHasSuffix(FieldCustomPropmt, v))
}

// CustomPropmtEqualFold applies the EqualFold predicate on the "custom_propmt" field.
func CustomPropmtEqualFold(v string) predicate.Bot {
	return predicate.Bot(sql.FieldEqualFold(FieldCustomPropmt, v))
}

// CustomPropmtContainsFold applies the ContainsFold predicate on the "custom_propmt" field.
func CustomPropmtContainsFold(v string) predicate.Bot {
	return predicate.Bot(sql.FieldContainsFold(FieldCustomPropmt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldLTE(FieldUpdatedAt, v))
}

// ArchivedAtEQ applies the EQ predicate on the "archived_at" field.
func ArchivedAtEQ(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldEQ(FieldArchivedAt, v))
}

// ArchivedAtNEQ applies the NEQ predicate on the "archived_at" field.
func ArchivedAtNEQ(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldNEQ(FieldArchivedAt, v))
}

// ArchivedAtIn applies the In predicate on the "archived_at" field.
func ArchivedAtIn(vs ...time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldIn(FieldArchivedAt, vs...))
}

// ArchivedAtNotIn applies the NotIn predicate on the "archived_at" field.
func ArchivedAtNotIn(vs ...time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldNotIn(FieldArchivedAt, vs...))
}

// ArchivedAtGT applies the GT predicate on the "archived_at" field.
func ArchivedAtGT(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldGT(FieldArchivedAt, v))
}

// ArchivedAtGTE applies the GTE predicate on the "archived_at" field.
func ArchivedAtGTE(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldGTE(FieldArchivedAt, v))
}

// ArchivedAtLT applies the LT predicate on the "archived_at" field.
func ArchivedAtLT(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldLT(FieldArchivedAt, v))
}

// ArchivedAtLTE applies the LTE predicate on the "archived_at" field.
func ArchivedAtLTE(v time.Time) predicate.Bot {
	return predicate.Bot(sql.FieldLTE(FieldArchivedAt, v))
}

// HasBlocks applies the HasEdge predicate on the "blocks" edge.
func HasBlocks() predicate.Bot {
	return predicate.Bot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BlocksTable, BlocksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlocksWith applies the HasEdge predicate on the "blocks" edge with a given conditions (other predicates).
func HasBlocksWith(preds ...predicate.BlockCategory) predicate.Bot {
	return predicate.Bot(func(s *sql.Selector) {
		step := newBlocksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Bot {
	return predicate.Bot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Bot {
	return predicate.Bot(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bot) predicate.Bot {
	return predicate.Bot(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bot) predicate.Bot {
	return predicate.Bot(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bot) predicate.Bot {
	return predicate.Bot(sql.NotPredicates(p))
}
