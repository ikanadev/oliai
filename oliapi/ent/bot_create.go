// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"oliapi/ent/blockcategory"
	"oliapi/ent/bot"
	"oliapi/ent/company"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BotCreate is the builder for creating a Bot entity.
type BotCreate struct {
	config
	mutation *BotMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BotCreate) SetName(s string) *BotCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetGreetingMessage sets the "greeting_message" field.
func (bc *BotCreate) SetGreetingMessage(s string) *BotCreate {
	bc.mutation.SetGreetingMessage(s)
	return bc
}

// SetCustomPropmt sets the "custom_propmt" field.
func (bc *BotCreate) SetCustomPropmt(s string) *BotCreate {
	bc.mutation.SetCustomPropmt(s)
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BotCreate) SetCreatedAt(t time.Time) *BotCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BotCreate) SetNillableCreatedAt(t *time.Time) *BotCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BotCreate) SetUpdatedAt(t time.Time) *BotCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BotCreate) SetNillableUpdatedAt(t *time.Time) *BotCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetArchivedAt sets the "archived_at" field.
func (bc *BotCreate) SetArchivedAt(t time.Time) *BotCreate {
	bc.mutation.SetArchivedAt(t)
	return bc
}

// SetID sets the "id" field.
func (bc *BotCreate) SetID(u uuid.UUID) *BotCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BotCreate) SetNillableID(u *uuid.UUID) *BotCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// AddBlockIDs adds the "blocks" edge to the BlockCategory entity by IDs.
func (bc *BotCreate) AddBlockIDs(ids ...uuid.UUID) *BotCreate {
	bc.mutation.AddBlockIDs(ids...)
	return bc
}

// AddBlocks adds the "blocks" edges to the BlockCategory entity.
func (bc *BotCreate) AddBlocks(b ...*BlockCategory) *BotCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBlockIDs(ids...)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (bc *BotCreate) SetCompanyID(id uuid.UUID) *BotCreate {
	bc.mutation.SetCompanyID(id)
	return bc
}

// SetCompany sets the "company" edge to the Company entity.
func (bc *BotCreate) SetCompany(c *Company) *BotCreate {
	return bc.SetCompanyID(c.ID)
}

// Mutation returns the BotMutation object of the builder.
func (bc *BotCreate) Mutation() *BotMutation {
	return bc.mutation
}

// Save creates the Bot in the database.
func (bc *BotCreate) Save(ctx context.Context) (*Bot, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BotCreate) SaveX(ctx context.Context) *Bot {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BotCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BotCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BotCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bot.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bot.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bot.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BotCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Bot.name"`)}
	}
	if _, ok := bc.mutation.GreetingMessage(); !ok {
		return &ValidationError{Name: "greeting_message", err: errors.New(`ent: missing required field "Bot.greeting_message"`)}
	}
	if _, ok := bc.mutation.CustomPropmt(); !ok {
		return &ValidationError{Name: "custom_propmt", err: errors.New(`ent: missing required field "Bot.custom_propmt"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bot.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bot.updated_at"`)}
	}
	if _, ok := bc.mutation.ArchivedAt(); !ok {
		return &ValidationError{Name: "archived_at", err: errors.New(`ent: missing required field "Bot.archived_at"`)}
	}
	if _, ok := bc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required edge "Bot.company"`)}
	}
	return nil
}

func (bc *BotCreate) sqlSave(ctx context.Context) (*Bot, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BotCreate) createSpec() (*Bot, *sqlgraph.CreateSpec) {
	var (
		_node = &Bot{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bot.Table, sqlgraph.NewFieldSpec(bot.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(bot.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.GreetingMessage(); ok {
		_spec.SetField(bot.FieldGreetingMessage, field.TypeString, value)
		_node.GreetingMessage = value
	}
	if value, ok := bc.mutation.CustomPropmt(); ok {
		_spec.SetField(bot.FieldCustomPropmt, field.TypeString, value)
		_node.CustomPropmt = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bot.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bot.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.ArchivedAt(); ok {
		_spec.SetField(bot.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = &value
	}
	if nodes := bc.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bot.BlocksTable,
			Columns: []string{bot.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bot.CompanyTable,
			Columns: []string{bot.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_bots = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BotCreateBulk is the builder for creating many Bot entities in bulk.
type BotCreateBulk struct {
	config
	err      error
	builders []*BotCreate
}

// Save creates the Bot entities in the database.
func (bcb *BotCreateBulk) Save(ctx context.Context) ([]*Bot, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bot, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BotCreateBulk) SaveX(ctx context.Context) []*Bot {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BotCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BotCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
